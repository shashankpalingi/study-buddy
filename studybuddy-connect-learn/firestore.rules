rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is a room participant
    function isRoomParticipant(roomId) {
      let room = get(/databases/$(database)/documents/studyRooms/$(roomId));
      return request.auth != null && (
        room.data.hostId == request.auth.uid || 
        room.data.createdBy == request.auth.uid ||
        (room.data.participants is map && room.data.participants[request.auth.uid] == true) ||
        (room.data.participants is list && request.auth.uid in room.data.participants)
      );
    }

    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user is an admin
    function isAdmin() {
      return request.auth != null && request.auth.uid in ['ny18fC2LknPurYpNpg3ga491c6s2'];  // Admin UID
    }

    // User profiles - each user can read public profiles, but only write their own
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create, update, delete: if request.auth != null && request.auth.uid == userId;
    }
    
    // User Daily AI Usage Data - each user can read and write their own daily usage data
    match /usage/{docId} {
      allow read, write: if request.auth != null && (
        // Allow access to user-specific usage documents
        docId.matches("^\\d{4}-\\d{2}-\\d{2}_" + request.auth.uid) ||
        // Allow access to daily usage documents
        docId.matches("^\\d{4}-\\d{2}-\\d{2}$") ||
        // Allow access to monthly usage documents
        docId.matches("^\\d{4}-\\d{2}$")
      );
    }
    
    // Study Rooms
    match /studyRooms/{roomId} {
      // Anyone can read any study room
      allow read: if request.auth != null;
      
      // Only authenticated users can create rooms
      allow create: if request.auth != null;
      
      // Allow updates in the following cases:
      // 1. Creator/admin can update any fields
      // 2. Participants can join (add themselves to participants array)
      // 3. Participants can leave (remove themselves from participants array)
      allow update, delete: if request.auth != null && 
        (resource.data.hostId == request.auth.uid || 
        resource.data.createdBy == request.auth.uid || 
        (resource.data.participants is map && resource.data.participants[request.auth.uid] == true) ||
        (resource.data.participants is list && request.auth.uid in resource.data.participants));
      
      // Chat messages within a study room
      match /messages/{messageId} {
        allow read, write: if isRoomParticipant(roomId);
      }
      
      // Participants in a study room
      match /participants/{participantId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null && request.auth.uid == participantId;
        allow update, delete: if request.auth != null && 
          (request.auth.uid == participantId || 
          get(/databases/$(database)/documents/studyRooms/$(roomId)).data.hostId == request.auth.uid ||
          get(/databases/$(database)/documents/studyRooms/$(roomId)).data.createdBy == request.auth.uid);
      }
      
      // Notes in a study room
      match /notes/{noteId} {
        allow read, write: if isRoomParticipant(roomId);
      }
      
      // Files in a study room
      match /files/{fileId} {
        allow read, write: if isRoomParticipant(roomId);
      }
      
      // Tasks in a study room
      match /tasks/{taskId} {
        allow read, write: if isRoomParticipant(roomId);
      }
      
      // Polls in a study room
      match /polls/{pollId} {
        allow read, write: if isRoomParticipant(roomId);
        
        // Poll votes
        match /votes/{voteId} {
          allow read, write: if isRoomParticipant(roomId);
        }
      }
      
      // Tools collection - contains various study tools
      match /tools/{toolId} {
        // Allow read access to any authenticated user
        allow read: if isAuthenticated();
        // Allow write access to room participants
        allow create, update, delete: if isRoomParticipant(roomId);
        
        // Whiteboard subcollections
        match /shapes/{shapeId} {
          allow read: if isAuthenticated();
          allow create, update, delete: if isAuthenticated();
        }
        
        // Allow access to all nested collections under tools
        match /{nestedCollection}/{nestedDocument} {
          allow read: if isAuthenticated();
          allow create, update, delete: if isAuthenticated();
        }
      }
      
      // Whiteboard data (legacy path)
      match /whiteboard/{dataId} {
        allow read, write: if isAuthenticated();
      }
      
      // YouTube watch together data (legacy path)
      match /youtube/{dataId} {
        allow read, write: if isAuthenticated();
      }
      
      // Video call participants
      match /videoParticipants/{participantId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null;  // Allow any authenticated user to create video participants
        allow update: if request.auth != null && (
          request.resource.data.userId == request.auth.uid || 
          get(/databases/$(database)/documents/studyRooms/$(roomId)).data.hostId == request.auth.uid ||
          get(/databases/$(database)/documents/studyRooms/$(roomId)).data.createdBy == request.auth.uid
        );
        allow delete: if request.auth != null && (
          resource.data.userId == request.auth.uid || 
          get(/databases/$(database)/documents/studyRooms/$(roomId)).data.hostId == request.auth.uid ||
          get(/databases/$(database)/documents/studyRooms/$(roomId)).data.createdBy == request.auth.uid
        );
      }
    }
  }
} 